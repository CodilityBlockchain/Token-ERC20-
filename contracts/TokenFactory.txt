The main purpose of the provided Solidity smart contract is to facilitate the creation and management of ERC-20 tokens. Let's break down 
the key functionalities and components of this contract:

Token Contract (Token.sol):
This contract defines the ERC-20 token standard, which is widely used for fungible tokens on the Ethereum blockchain.
It allows for the creation of new ERC-20 tokens with customizable parameters such as name, symbol, and decimals.
The contract maintains a ledger of token balances for each address and keeps track of the total token supply.
Token minting and burning functions are provided, allowing the owner to create new tokens and destroy existing ones.
It includes functions for transferring tokens between addresses and managing allowances (e.g., allowing another address to spend 
tokens on behalf of the owner).
Ownership of the token contract can be transferred to another address.

Token Factory Contract (TokenFactory.sol):
This contract serves as a factory for creating new instances of the Token contract.
It maintains a list of deployed tokens, allowing users to keep track of all ERC-20 tokens created using this factory.
Users can create new ERC-20 tokens by calling the createToken function, specifying the token's name, symbol, and decimals.
The factory contract emits an event when a new token is created, providing information about the token's address, name, symbol, and decimals.
Users can query the list of deployed tokens using the getDeployedTokens function.

In summary, the main purpose of this smart contract ecosystem is to simplify the creation and management of custom ERC-20 tokens. It allows 
users to create tokens with specific parameters and keeps a record of all deployed tokens for easy reference. This setup can be useful for t
oken creators and projects looking to launch their own fungible tokens on the Ethereum blockchain.